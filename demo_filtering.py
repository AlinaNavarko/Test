"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
–ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
"""

from configurator import ServerConfigurator
from sample_data_ru import create_sample_data_ru, create_compatibility_matrix_extended
from data_models import ComponentType

def print_separator():
    print("=" * 70)

def demo_hp_server():
    """–î–µ–º–æ: –≤—ã–±–∏—Ä–∞–µ–º HP —Å–µ—Ä–≤–µ—Ä"""
    print_separator()
    print("–°–¶–ï–ù–ê–†–ò–ô 1: –í—ã–±–∏—Ä–∞–µ–º HP ProLiant ML350 G4p (Socket 604, DDR2)")
    print_separator()
    
    configurator = ServerConfigurator()
    configurator.data = create_sample_data_ru()
    configurator.compatibility_matrix = create_compatibility_matrix_extended()
    
    # –î–æ–±–∞–≤–ª—è–µ–º HP —Å–µ—Ä–≤–µ—Ä
    success, errors = configurator.add_component("hp_ml350g4p")
    print(f"\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: HP ProLiant ML350 G4p")
    
    # –¢–µ–ø–µ—Ä—å —Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã
    print("\nüìå –î–û–°–¢–£–ü–ù–´–ï –ü–†–û–¶–ï–°–°–û–†–´ (—Ç–æ–ª—å–∫–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å HP):")
    available_cpus = configurator.get_available_components(ComponentType.PROCESSOR)
    if available_cpus:
        for cpu in available_cpus:
            print(f"  ‚úÖ {cpu.name}")
            socket = next((attr.value for attr in cpu.attributes if attr.name == "–°–æ–∫–µ—Ç"), "N/A")
            print(f"     –°–æ–∫–µ—Ç: {socket}, –¶–µ–Ω–∞: {cpu.price} ‚ÇΩ")
    else:
        print("  ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤")
    
    # –°–º–æ—Ç—Ä–∏–º –ø–∞–º—è—Ç—å
    print("\nüìå –î–û–°–¢–£–ü–ù–ê–Ø –ü–ê–ú–Ø–¢–¨ (—Ç–æ–ª—å–∫–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å HP):")
    available_memory = configurator.get_available_components(ComponentType.MEMORY)
    if available_memory:
        for mem in available_memory:
            print(f"  ‚úÖ {mem.name}")
            mem_type = next((attr.value for attr in mem.attributes if attr.name == "–¢–∏–ø"), "N/A")
            print(f"     –¢–∏–ø: {mem_type}, –¶–µ–Ω–∞: {mem.price} ‚ÇΩ")
    
    # –°–º–æ—Ç—Ä–∏–º –±–ª–æ–∫–∏ –ø–∏—Ç–∞–Ω–∏—è
    print("\nüìå –î–û–°–¢–£–ü–ù–´–ï –ë–õ–û–ö–ò –ü–ò–¢–ê–ù–ò–Ø:")
    available_psu = configurator.get_available_components(ComponentType.POWER_SUPPLY)
    if available_psu:
        for psu in available_psu:
            print(f"  ‚úÖ {psu.name}")
    
    print("\n‚ùå –ù–ï–î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
    print("  ‚Ä¢ Intel Xeon E5620 (Socket 1366 - –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å HP Socket 604)")
    print("  ‚Ä¢ Intel Xeon X5670 (Socket 1366 - –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å HP Socket 604)")
    print("  ‚Ä¢ Samsung 4 –ì–ë DDR3 (DDR3 –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å DDR2)")
    print("  ‚Ä¢ Crucial 8 –ì–ë DDR3 (DDR3 –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å DDR2)")
    print("  ‚Ä¢ Dell –ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è Dell —Å–µ—Ä–≤–µ—Ä–æ–≤)")
    print("  ‚Ä¢ IBM –ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è IBM —Å–µ—Ä–≤–µ—Ä–æ–≤)")

def demo_dell_server():
    """–î–µ–º–æ: –≤—ã–±–∏—Ä–∞–µ–º Dell —Å–µ—Ä–≤–µ—Ä"""
    print("\n\n")
    print_separator()
    print("–°–¶–ï–ù–ê–†–ò–ô 2: –í—ã–±–∏—Ä–∞–µ–º Dell PowerEdge R710 (Socket 1366, DDR3)")
    print_separator()
    
    configurator = ServerConfigurator()
    configurator.data = create_sample_data_ru()
    configurator.compatibility_matrix = create_compatibility_matrix_extended()
    
    # –î–æ–±–∞–≤–ª—è–µ–º Dell —Å–µ—Ä–≤–µ—Ä
    success, errors = configurator.add_component("dell_poweredge_r710")
    print(f"\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: Dell PowerEdge R710")
    
    # –°–º–æ—Ç—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã
    print("\nüìå –î–û–°–¢–£–ü–ù–´–ï –ü–†–û–¶–ï–°–°–û–†–´ (—Ç–æ–ª—å–∫–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Å Dell):")
    available_cpus = configurator.get_available_components(ComponentType.PROCESSOR)
    if available_cpus:
        for cpu in available_cpus:
            print(f"  ‚úÖ {cpu.name}")
            socket = next((attr.value for attr in cpu.attributes if attr.name == "–°–æ–∫–µ—Ç"), "N/A")
            cores = next((attr.value for attr in cpu.attributes if attr.name == "–Ø–¥–µ—Ä"), "N/A")
            print(f"     –°–æ–∫–µ—Ç: {socket}, –Ø–¥–µ—Ä: {cores}, –¶–µ–Ω–∞: {cpu.price} ‚ÇΩ")
    
    # –°–º–æ—Ç—Ä–∏–º –ø–∞–º—è—Ç—å
    print("\nüìå –î–û–°–¢–£–ü–ù–ê–Ø –ü–ê–ú–Ø–¢–¨ (—Ç–æ–ª—å–∫–æ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å Dell):")
    available_memory = configurator.get_available_components(ComponentType.MEMORY)
    if available_memory:
        for mem in available_memory:
            print(f"  ‚úÖ {mem.name}")
            mem_type = next((attr.value for attr in mem.attributes if attr.name == "–¢–∏–ø"), "N/A")
            capacity = next((attr.value for attr in mem.attributes if attr.name == "–û–±—ä–µ–º"), "N/A")
            print(f"     –¢–∏–ø: {mem_type}, –û–±—ä–µ–º: {capacity} –ì–ë, –¶–µ–Ω–∞: {mem.price} ‚ÇΩ")
    
    # –°–º–æ—Ç—Ä–∏–º –±–ª–æ–∫–∏ –ø–∏—Ç–∞–Ω–∏—è
    print("\nüìå –î–û–°–¢–£–ü–ù–´–ï –ë–õ–û–ö–ò –ü–ò–¢–ê–ù–ò–Ø:")
    available_psu = configurator.get_available_components(ComponentType.POWER_SUPPLY)
    if available_psu:
        for psu in available_psu:
            print(f"  ‚úÖ {psu.name}")
    
    print("\n‚ùå –ù–ï–î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:")
    print("  ‚Ä¢ Intel Xeon 3.0 –ì–ì—Ü (Socket 604 - –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å Dell Socket 1366)")
    print("  ‚Ä¢ Intel Xeon 3.2 –ì–ì—Ü (Socket 604 - –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å Dell Socket 1366)")
    print("  ‚Ä¢ Kingston 1 –ì–ë DDR2 (DDR2 –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å DDR3)")
    print("  ‚Ä¢ Corsair 2 –ì–ë DDR2 (DDR2 –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å DDR3)")
    print("  ‚Ä¢ HP –ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è HP —Å–µ—Ä–≤–µ—Ä–æ–≤)")
    print("  ‚Ä¢ IBM –ë–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è IBM —Å–µ—Ä–≤–µ—Ä–æ–≤)")

def demo_without_server():
    """–î–µ–º–æ: –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("\n\n")
    print_separator()
    print("–°–¶–ï–ù–ê–†–ò–ô 3: –ë–µ–∑ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã)")
    print_separator()
    
    configurator = ServerConfigurator()
    configurator.data = create_sample_data_ru()
    configurator.compatibility_matrix = create_compatibility_matrix_extended()
    
    print("\nüìå –í–°–ï –î–û–°–¢–£–ü–ù–´–ï –ü–†–û–¶–ï–°–°–û–†–´:")
    available_cpus = configurator.get_available_components(ComponentType.PROCESSOR)
    for cpu in available_cpus:
        print(f"  ‚Ä¢ {cpu.name}")
    
    print(f"\n–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(available_cpus)} –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤")
    
    print("\nüí° –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ—Ç—Å—è!")

def demo_try_add_incompatible():
    """–î–µ–º–æ: –ø–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç"""
    print("\n\n")
    print_separator()
    print("–°–¶–ï–ù–ê–†–ò–ô 4: –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
    print_separator()
    
    configurator = ServerConfigurator()
    configurator.data = create_sample_data_ru()
    configurator.compatibility_matrix = create_compatibility_matrix_extended()
    
    # –î–æ–±–∞–≤–ª—è–µ–º HP —Å–µ—Ä–≤–µ—Ä
    configurator.add_component("hp_ml350g4p")
    print(f"\n‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: HP ProLiant ML350 G4p (Socket 604, DDR2)")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è Dell (Socket 1366)
    print("\n‚ùå –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å Intel Xeon E5620 (Socket 1366):")
    success, errors = configurator.add_component("intel_xeon_e5620")
    if not success:
        print(f"   –û–®–ò–ë–ö–ê: {errors[0]}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    print("\n‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π Intel Xeon 3.0 –ì–ì—Ü (Socket 604):")
    success, errors = configurator.add_component("intel_xeon_3_0_604")
    if success:
        print("   –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å DDR3 –ø–∞–º—è—Ç—å
    print("\n‚ùå –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å Samsung 4 –ì–ë DDR3:")
    success, errors = configurator.add_component("samsung_4gb_ddr3_1333")
    if not success:
        print(f"   –û–®–ò–ë–ö–ê: {errors[0]}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é DDR2 –ø–∞–º—è—Ç—å
    print("\n‚úÖ –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é Kingston 1 –ì–ë DDR2:")
    success, errors = configurator.add_component("kingston_1gb_ddr2_400")
    if success:
        print("   –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = configurator.get_current_configuration()
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
    print(f"   –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {config.total_price} ‚ÇΩ")
    print(f"   –í–∞–ª–∏–¥–Ω–∞: {'‚úÖ' if config.is_valid else '‚ùå'}")
    print(f"   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {sum(len(c) for c in config.components.values())}")

if __name__ == "__main__":
    print("\nüñ•Ô∏è  –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ö–û–ú–ü–û–ù–ï–ù–¢–û–í\n")
    
    demo_hp_server()
    demo_dell_server()
    demo_without_server()
    demo_try_add_incompatible()
    
    print("\n\n")
    print_separator()
    print("–í–´–í–û–î:")
    print_separator()
    print("""
‚úÖ –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Å–µ—Ä–≤–µ—Ä–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ñ–∏–ª—å—Ç—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã
‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ —Å–æ–∫–µ—Ç—É, —Ç–∏–ø—É –ø–∞–º—è—Ç–∏, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é –ë–ü
‚úÖ –ú–∞—Ç—Ä–∏—Ü–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –∑–∞ O(1)

üí° –î–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤—ã–∑—ã–≤–∞–π—Ç–µ 
   get_available_components() –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –∏—Ö!
    """)
    print_separator()

